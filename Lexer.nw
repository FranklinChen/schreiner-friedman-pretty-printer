% Lexer.nw
% For Lexer.sig and Lexer.lex

\title{Lexer for Compiler in [[mosmllex]]}
\author{Franklin Chen}
\date{July 28, 1996}

\maketitle

This is a lexer for the project developed in \cite{Schreiner and
Friedman}, done in [[mosmllex]] for Moscow ML rather than in [[lex]]
or [[flex]] for C.

\section{[[Lexer]] signature}

We begin by providing the desired signature.

<<[[Lexer.sig]]>>=
exception LexicalError of string * int * int;
val Token : Lexing.lexbuf -> Parser.token;
@

\section{[[Lexer]] specification}

The specification file has a well-defined format:

<<*>>=
{
<<Header>>
}
<<Entry points>>
;
@
 
\subsection{Header}

<<Header>>=
<<Modules to open>>
<<Auxiliary definitions>>
@

We need to access the tokens that [[Parser]] expects.

<<Modules to open>>=
open Parser;
@

We raise [[LexicalError]] with a message and two character numbers, if
we run into a problem while lexing.

<<Auxiliary definitions>>=
exception LexicalError of string * int * int;

fun lexerError lexbuf s = 
  raise LexicalError (s, getLexemeStart lexbuf, getLexemeEnd lexbuf)
;
@ %def LexicalError lexerError

We maintain a simple symbol table mapping [[string]]s to reserved word
tokens.  A hash table implementation from module [[Hasht]] is used.

<<Auxiliary definitions>>=    
val keyword_table = (Hasht.new 7 : (string,token) Hasht.t);

val () =
List.app (fn (str,tok) => Hasht.insert keyword_table str tok)
[
  ("break", BREAK),
  ("continue", CONTINUE),
  ("else", ELSE),
  ("if", IF),
  ("int", INT),
  ("return", RETURN),
  ("while", WHILE)
];

fun mkKeyword lexbuf =
  let val s = getLexeme lexbuf in
    Hasht.find keyword_table s
    handle Subscript => Identifier s
  end
;
@ %def keyword_table mkKeyword

\subsection{Entry points}

Now we present the entry points.  For now, we have only one.

<<Entry points>>=
rule Token = parse
  <<Patterns and actions>>
@ %def Token

<<Patterns and actions>>=
  <<Preprocessor info>>
| <<Fixed string tokens>>
| <<Keywords and identifiers>>
| <<Constants>>
| <<White space>>
| <<End of file token>>
| <<Illegal token>>
@

[FMC] We still need to properly handle line number adjustments.

<<Preprocessor info>>=
`\n` "#" [`0`-`9`]+ ([` ` `\t`]+ _* )? `\n`
{
  Token lexbuf
}
@

<<Fixed string tokens>>=
";" { SEMI }
| "(" { LPAREN }
| ")" { RPAREN }
| "{" { LBRACE }
| "}" { RBRACE }
| "+" { PLUS }
| "-" { MINUS }
| "*" { TIMES }
| "/" { DIVIDE }
| "%" { REM }
| ">" { GT }
| "<" { LT }
| ">=" { GE }
| "<=" { LE }
| "==" { EQ }
| "!=" { NE }
| "&" { AMP }
| "^" { CARET }
| "|" { BAR }
| "=" { ASSIGN }
| "+=" { PE }
| "-=" { ME }
| "*=" { TE }
| "/=" { DE }
| "%=" { RE }
| "++" { PP }
| "--" { MM }
| "," { COMMA }
@
    
Keywords are distinguished from identifiers by means of a lookup into
the fixed table of keywords.

<<Keywords and identifiers>>=
[`A`-`Z` `a`-`z` `_`] [`A`-`Z` `a`-`z` `_` `0`-`9`]*
{
  mkKeyword lexbuf
}
@

Only integer constants are currently supported.

<<Constants>>=
[`0`-`9`]+
{
  let
    val str = getLexeme lexbuf
  in
    case Int.fromString str of
        NONE => lexerError
                lexbuf
                ("Failed to convert string \"" ^ str ^ "\" to integer")
      | SOME i => Constant i
  end
}
@

Skip blanks.
[FMC] We really need to keep line number info.

<<White space>>=
[` ` `\t` `\n`]+
{
  Token lexbuf
}
@

<<End of file token>>=
(eof) { EOF }
@

<<Illegal token>>=
_
{
  lexerError
  lexbuf
  ("Illegal token \"" ^
   (getLexeme lexbuf) ^
   "\" in input")
}
@

\section{Limitations}

The [[#]] line/file directives, intended to be emitted by a
preprocessor, are not lexed correctly in the case of its being the
first line of input.

Location information is not currently being maintained at all in the
lexer.  Line number and column number information should ideally be
kept up to date, for the purpose of error messages.  The line
directives mentioned above should also adjust the line number
information (and file information) appropriately.

Anyway, error handling is also nonexistent.

\section{Indices}
\subsection{Chunks}
\nowebchunks
\subsection{Identifiers}
\nowebindex

\begin{thebibliography}{99}

\bibitem{Schreiner and Friedman}
Axel T. Schreiner and H. George Friedman, Jr.
\emph{
      Introduction to Compiler Construction with UNIX\footnote
      {UNIX is a trademark of Bell Laboratories.}
      }.
Prentice-Hall, Inc., New Jersey, 1985.

\end{thebibliography}

%%% Local Variables:
%%% noweb-code-mode: sml-mode
%%% End:

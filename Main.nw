% Main.nw
% For Main.sml

\title{Main Driver for Compiler using [[mosmllex]] and [[mosmlyac]]}
\author{Franklin Chen}

\maketitle

This is a driver that simply hooks up [[Lexer]] and [[Parser]].

<<*>>=
local open <<Modules to open>> in
  <<Auxiliary definitions>>
  <<Definition of [[main]]>>
  val _ = main ()
end
@

We want to do I/O.  Use the old [[BasicIO]] interface because that's
what [[Lexing]] currently hooks up with, unfortunately.

<<Modules to open>>=
BasicIO
Nonstdio
@

[[main]] parses the command line to determine what input stream to
compile from, then spawns off the compile.

<<Definition of [[main]]>>=
fun main () =
let
  val argv = Mosml.argv ()
  val is = <<Open the indicated input stream>>
  val lexbuf = <<Create the lexer stream>>
  val formatAction = <<Parse the lexer stream>>
  val action = Format.create();
in
  formatAction action
end
@ %def argv is lexbuf main

Determine the input stream to open based on the command line.  We will
accept either no arguments, indicating standard input is to be read,
or one argument, indicating a named file is to be read.

[FMC] We currently have no way of transparently opening up a pipe to
the C preprocessor, which was the interface in the original C program.

<<Open the indicated input stream>>=
(case argv of
    [_] => std_in
  | [_, name] => (open_in name
                  handle (SysErr _) =>
                    fatal ("Failed to open " ^ name))
  | arg0::_ => fatal ("Usage: " ^ arg0 ^ " [file]")
)
@

<<Auxiliary definitions>>=
fun fatal s =
(
  output(std_err, s ^ "\n");
  exit 1
)
@ %def fatal

<<Create the lexer stream>>=
createLexerStream is
@

<<Auxiliary definitions>>=
fun createLexerStream (is : instream) =
  Lexing.createLexer
  (fn buff => fn n => Nonstdio.buff_input is buff 0 n)
@ %def createLexerStream

<<Parse the lexer stream>>=
parseMain Parser.program Lexer.Token lexbuf
@

We handle a parse error by outputting an error message.  There is no
attempt at error recovery because [[mosmlyac]] does not provide
convenient support for it.  We also catch lexical errors.  In either
case, we simply die.

<<Auxiliary definitions>>=
fun parsePhrase parsingFun lexingFun lexbuf =
  parsingFun lexingFun lexbuf
  handle
    Parsing.ParseError _ =>
      let
        val pos1 = Lexing.getLexemeStart lexbuf
        val pos2 = Lexing.getLexemeEnd lexbuf
      in
        fatal ("Syntax error [" ^
              (Int.toString pos1) ^ ", " ^
              (Int.toString pos2) ^ "]")
      end
  | Lexer.LexicalError (str, num1, num2) =>
    fatal ("Lexer error [" ^
           (Int.toString num1) ^ ", " ^
           (Int.toString num2) ^ "]: " ^
           str)
;
@

This is a wrapper to make sure we clean up the lexer and parser.

<<Auxiliary definitions>>=
fun parseMain parsingFun lexingFun lexbuf = 
  let
    val mainPhrase = parsePhrase parsingFun lexingFun lexbuf
      handle x => (Parsing.clearParser(); raise x)
  in
    Parsing.clearParser();
    mainPhrase
  end
;
@

\section{Indices}
\subsection{Chunks}
\nowebchunks
\subsection{Identifiers}
\nowebindex

%%% Local Variables:
%%% noweb-code-mode: sml-mode
%%% End:
